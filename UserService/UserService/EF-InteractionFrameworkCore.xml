<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EF-InteractionFrameworkCore</name>
    </assembly>
    <members>
        <member name="T:EF_InteractionFrameworkCore.AsyncRepository`1">
            <summary>
            Provides the implementation of the IAsyncRepository interface
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:EF_InteractionFrameworkCore.AsyncRepository`1.#ctor(Microsoft.EntityFrameworkCore.IDbContextFactory{`0})">
            <summary>
            Uses IDbContextFactory to create context instances
            </summary>
            <param name="dbContextFactory"></param>
        </member>
        <member name="M:EF_InteractionFrameworkCore.AsyncRepository`1.AddItem``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:EF_InteractionFrameworkCore.AsyncRepository`1.AddItems``1(System.Collections.Generic.List{``0})">
            <inheritdoc/>
        </member>
        <member name="M:EF_InteractionFrameworkCore.AsyncRepository`1.RemoveItem``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:EF_InteractionFrameworkCore.AsyncRepository`1.RemoveItem``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <inheritdoc/>
        </member>
        <member name="M:EF_InteractionFrameworkCore.AsyncRepository`1.RemoveItems``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:EF_InteractionFrameworkCore.AsyncRepository`1.RemoveItems``1(System.Collections.Generic.List{``0})">
            <inheritdoc/>
        </member>
        <member name="M:EF_InteractionFrameworkCore.AsyncRepository`1.GetItem``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:EF_InteractionFrameworkCore.AsyncRepository`1.GetAllItems``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:EF_InteractionFrameworkCore.AsyncRepository`1.GetAllForColumn``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1}})">
            <inheritdoc/>
        </member>
        <member name="M:EF_InteractionFrameworkCore.AsyncRepository`1.GetAllForColumnStruct``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1}})">
            <inheritdoc/>
        </member>
        <member name="M:EF_InteractionFrameworkCore.AsyncRepository`1.UpdateItem``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:EF_InteractionFrameworkCore.AsyncRepository`1.UpdateItems``1(System.Collections.Generic.List{``0})">
            <inheritdoc/>
        </member>
        <member name="T:EF_InteractionFrameworkCore.Interfaces.IAsyncRepository`1">
            <summary>
            Interface providing generic async methods for interacting with EF Core's DbContext.
            <para>
            Must be registered as a service in Startup.cs using one of the provided AddTransient, AddScoped, AddSingleton versions Example:
            <![CDATA[
            builder.Services.AddTransientAsyncRepository<TestContext>();
            ]]>
            </para>
            <para>
            Alongside a DbContext factory:
            <![CDATA[
            builder.Services.AddDbContextFactory<YourContext>();
            ]]>
            </para>
            </summary>
            <typeparam name="TContext">The DbContext type</typeparam>
        </member>
        <member name="M:EF_InteractionFrameworkCore.Interfaces.IAsyncRepository`1.AddItem``1(``0)">
            <summary>
            Adds the TEntity to DbSet matching the type parameter
            </summary>
            <typeparam name="TEntity">TEntity that exists in the DbContext</typeparam>
            <param name="entity">TEntity reference</param>
            <returns></returns>
        </member>
        <member name="M:EF_InteractionFrameworkCore.Interfaces.IAsyncRepository`1.AddItems``1(System.Collections.Generic.List{``0})">
            <summary>
            Adds the TEntities to the DbSet matching the type parameter
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities">List of TEntity to add to DbSet</param>
            <returns></returns>
        </member>
        <member name="M:EF_InteractionFrameworkCore.Interfaces.IAsyncRepository`1.RemoveItem``1(``0)">
            <summary>
            Removes a TEntity from the DbSet matching type parameter
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:EF_InteractionFrameworkCore.Interfaces.IAsyncRepository`1.RemoveItem``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Removes a TEntity matching the provided searchExpression from the DbSet matching type parameter
            <para>
            <![CDATA[Example: _repository.RemoveItem<TEntity>(x => x.Id == 222);]]>
            </para>
            </summary>
            <typeparam name="TEntity">Entity that exists in a DbSet</typeparam>
            <param name="searchExpression">Lambda expression</param>
            <returns></returns>
        </member>
        <member name="M:EF_InteractionFrameworkCore.Interfaces.IAsyncRepository`1.RemoveItems``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            Removes all TEntities that match the provided queryOperation from the DbSet matching type parameter
            <para>
            <![CDATA[Example: _repository.RemoveItems<TEntity>(query => query.Where(x => x.Age == 5));]]>
            </para>
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="queryOperation">IQueryable expression</param>
            <returns></returns>
        </member>
        <member name="M:EF_InteractionFrameworkCore.Interfaces.IAsyncRepository`1.RemoveItems``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes the TEntities from the DbSet matching type parameters
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="itemsToRemove">List of TEntities to remove from DbSet</param>
            <returns></returns>
        </member>
        <member name="M:EF_InteractionFrameworkCore.Interfaces.IAsyncRepository`1.GetItem``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            Returns the TEntity matching the queryOperation from the DbSet matching type parameters
            <para>
            <![CDATA[Example: _repository.GetItem<TEntity>(query => query.Where(x => x.ID == 201023));]]>
            </para>
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="queryOperation">IQueryable expression</param>
            <returns>FirstOrDefault TEntity</returns>
        </member>
        <member name="M:EF_InteractionFrameworkCore.Interfaces.IAsyncRepository`1.GetAllItems``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            Returns TEntity list of DbSet matching type parameters by default.
            <para>
            Returns TEntity list of entries matching queryOperation when optional parameter is used.
            </para>
            <para>
            <![CDATA[Example: _repository.GetAllItems<TEntity>(query => query.Where(x=> x.Age == 4));]]>
            </para>
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="queryOperation">Optional IQueryable expression</param>
            <returns>List{TEntity}</returns>
        </member>
        <member name="M:EF_InteractionFrameworkCore.Interfaces.IAsyncRepository`1.GetAllForColumn``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1}})">
            <summary>
            Returns T from DbSet matching type parameter.
            <para>Used to retrieve a specific column</para>
            <para>
            <![CDATA[Example: _repository.GetAllForColumn<TEntity, string>(q => q.Select(x => x.PropertyName))]]>
            </para>
            </summary>
            <typeparam name="TEntity">TEntity that is in a DbSet</typeparam>
            <typeparam name="T">Expected return type</typeparam>
            <param name="queryOperation">IQueryable expression</param>
            <returns>List{T}</returns>
        </member>
        <member name="M:EF_InteractionFrameworkCore.Interfaces.IAsyncRepository`1.GetAllForColumnStruct``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1}})">
            <summary>
            Returns T from DbSet matching type parameter.
            <para>Used to retrieve struct data types</para>
            <para>
            <![CDATA[Example: _repository.GetAllForColumn<TEntity, int>(q => q.Select(x => x.PropertyName))]]>
            </para>
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="queryOperation"></param>
            <returns></returns>
        </member>
        <member name="M:EF_InteractionFrameworkCore.Interfaces.IAsyncRepository`1.UpdateItem``1(``0)">
            <summary>
            Changes TEntity reference and its' collections EntityState to Modified
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="item">Tracked TEntity</param>
            <returns></returns>
        </member>
        <member name="M:EF_InteractionFrameworkCore.Interfaces.IAsyncRepository`1.UpdateItems``1(System.Collections.Generic.List{``0})">
            <summary>
            Changes TEntity references and their collections EntityState to Modified
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="items">List of tracked TEntities</param>
            <returns></returns>
        </member>
        <member name="T:EF_InteractionFrameworkCore.ServiceCollectionExtention">
            <summary>
            Methods for adding the AsyncRepository to the IServiceCollection
            </summary>
        </member>
        <member name="M:EF_InteractionFrameworkCore.ServiceCollectionExtention.AddScopedAsyncRepository``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the AsyncRepository as a scoped service
            </summary>
            <typeparam name="TContext"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:EF_InteractionFrameworkCore.ServiceCollectionExtention.AddTransientAsyncRepository``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the AsyncRepository as a transient service
            </summary>
            <typeparam name="TContext"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:EF_InteractionFrameworkCore.ServiceCollectionExtention.AddSingletonAsyncRepository``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the AsyncRepository as a singleton service
            </summary>
            <typeparam name="TContext"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
    </members>
</doc>
